package de.watchmywatch.repository.storage;


import de.watchmywatch.model.AccountManagment.Customer;
import de.watchmywatch.model.Helper.Address;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


import java.util.Calendar;
import java.util.Date;
import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)

public class CustomerController {
    @Autowired // This means to get the bean called CustomerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    public CustomerRepository customerRepository;



    @PostMapping(path="/customer") // Map ONLY POST Requests
    public @ResponseBody String addNewCustomer (@RequestParam String name,@RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        // TODO: Testing should be done in a different file/class ...
        Address address = new Address("Lilo-Herrmann-Straße 2", "Erfurt", "Thüringen", "99086");
        Customer customer = new Customer(email, address, "01716181447", name, "Bespalov", new Date(1998, Calendar.SEPTEMBER, 23));

       customerRepository.save(customer);
        return "Saved";
    }


    @GetMapping(path="/customers")
    public @ResponseBody Iterable<Customer> getAllCustomers() {
        // This returns a JSON or XML with the users
        return customerRepository.findAll();
    }

    @GetMapping(value="/customer/{customerId}")
    public @ResponseBody Optional<Customer> getOneCustomer(@PathVariable Integer  customerId) {
        // This returns a JSON or XML with the one user

        return customerRepository.findById(customerId);
    }

    // PUT /api/customers/:id updates the customer with the id
    @PutMapping("/customers/{id}")
    public @ResponseBody
    Customer updateCustomer(@PathVariable Integer id, @RequestBody Customer newCustomer) {
        return customerRepository.findById(id)
                .map(customer -> {
              customer.setAddress(newCustomer.getAddress());
              customer.setDob(newCustomer.getDob());
              customer.setEmail(newCustomer.getEmail());
              customer.setFirstname(newCustomer.getFirstname());
              customer.setLastname(newCustomer.getLastname());
              customer.setPhone(newCustomer.getPhone());
              return customerRepository.save(customer);
                })
                .orElseGet(() -> {
                    newCustomer.setId(id);
                    return customerRepository.save(newCustomer);
                });
    }

    // DELETE /api/customers/:id deletes the customer with id
    @DeleteMapping("/customers/{id}")
    public @ResponseBody
    String deleteCustomer(@PathVariable int id) {
        customerRepository.deleteById(id);
        return "Deleted";
    }

}




