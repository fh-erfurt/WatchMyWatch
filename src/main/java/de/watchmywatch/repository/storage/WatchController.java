package de.watchmywatch.repository.storage;

import de.watchmywatch.model.AccountManagment.Customer;
import de.watchmywatch.model.Exceptions.ShoppingcartEmptyException;
import de.watchmywatch.model.Exceptions.WatchNameNotValidException;
import de.watchmywatch.model.Helper.Address;
import de.watchmywatch.model.WatchManagment.*;
import de.watchmywatch.repository.exception.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Calendar;
import java.util.Date;
import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)

public class WatchController {
    @Autowired // This means to get the bean called CustomerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    public WatchRepository watchRepository;

    //define helper findByIDs
    public Optional<Bracelet> findBraceletById(int id) {
        return watchRepository.findBraceletById(id);
    }

    public Optional<Casing> findCasingById(int id) {
        return watchRepository.findCasingById(id);
    }

    public Optional<Clockwork> findClockworkById(int id) {
        return watchRepository.findClockworkById(id);
    }

    // GET /api/watches returns all watches
    @GetMapping("/watches")
    public @ResponseBody
    Iterable<Watch> getAllWatches() {
        return watchRepository.findAll();
    }

    // GET /api/watches/:id returns watch with id
    @GetMapping("/watches/{id}")
    public @ResponseBody
    Watch getOneCustomer(@PathVariable Integer id) {
        return watchRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("watch", id));
    }

    // POST /api/watches creates a watch in the database and returns it
    @PostMapping("/watches")
    public @ResponseBody
    Watch addNewWatch(@RequestBody Watch watch) {
        return watchRepository.save(watch);
    }

    // PUT /api/watches updates the watch with the id
    @PutMapping("/watches/{id}")
    public @ResponseBody
    Watch updateWatch(@PathVariable Integer id, @RequestBody Watch newWatch) {
        return watchRepository.findById(id)
                .map(watch -> {
                    try {
                        watch.setName(newWatch.getName());
                    } catch (WatchNameNotValidException e) {
                        e.printStackTrace();
                    }
                    watch.setParticularity(newWatch.getParticularity());
                    watch.setBracelet(newWatch.getBracelet());
                    watch.setCasing(newWatch.getCasing());
                    watch.setClockwork(newWatch.getClockwork());
                    return watchRepository.save(watch);
                })
                .orElseGet(() -> {
                    newWatch.setId(id);
                    return watchRepository.save(newWatch);
                });
    }

    // DELETE /api/watches/:id deletes the watch with id
    @DeleteMapping(path = "/watches/{id}")
    public @ResponseBody
    String updateWatch(@PathVariable Integer id) {
        watchRepository.deleteById(id);
        return "Deleted";
    }
}




