package de.watchmywatch.repository.storage.api;

import de.watchmywatch.model.OrderManagment.Shoppingcart;
import de.watchmywatch.model.WatchManagment.Watch;
import de.watchmywatch.repository.exception.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // Identifies Class as Controller
@RequestMapping(path="/api") // URL's start with /demo (after Application path)
public class ShoppingcartController {
    @Autowired // This means to get the bean called ShoppingcartRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    public ShoppingcartRepository shoppingcartRepository;
    @Autowired
    public WatchRepository watchRepository;

    // GET /api/shoppingcarts returns all shoppingcarts
    @GetMapping(path="/shoppingcarts")
    public @ResponseBody Iterable<Shoppingcart> getAllShoppingcarts() {
        // This returns a JSON or XML with the users
        return shoppingcartRepository.findAll();
    }

    // GET /api/shoppingcarts/:id returns shoppingcart with id
    @GetMapping(value="/shoppingcarts/{shoppingcartId}")
    public @ResponseBody
    Shoppingcart getOneShoppingcart(@PathVariable Integer  shoppingcartId) {
        // This returns a JSON or XML with the one shoppingcart
        return shoppingcartRepository.findById(shoppingcartId)
                .orElseThrow(() -> new NotFoundException("shoppingcart", shoppingcartId));
    }

    // POST /api/shoppingcarts creates a shoppingcart in the database and returns "Saved"
    @PostMapping(path="/shoppingcarts") // Map ONLY POST Requests
    public @ResponseBody String addNewShoppingcart (Shoppingcart shoppingcart) {
        shoppingcartRepository.save(shoppingcart);
        return "Saved";
    }

    // PUT /api/shoppingcarts/:id updates the shoppingcart with the id
    @PutMapping("/shoppingcarts/{id}")
    public @ResponseBody
    Shoppingcart updateShoppingcart(@PathVariable Integer id, @RequestBody Shoppingcart newShoppingcart) {
        return shoppingcartRepository.findById(id)
                .map(shoppingcart -> {
                    shoppingcart.setItems(newShoppingcart.getItems());
                    shoppingcart.calcTotal();
                    return shoppingcartRepository.save(shoppingcart);
                })
                .orElseGet(() -> {
                    newShoppingcart.setId(id);
                    return shoppingcartRepository.save(newShoppingcart);
                });
    }

    // DELETE /api/shoppingcarts/:id deletes the shoppingcart with id and returns "Deleted"
    @DeleteMapping(path = "/shoppingcarts/{id}")
    public @ResponseBody
    String updateShoppingcart(@PathVariable Integer id) {
        shoppingcartRepository.deleteById(id);
        return "Deleted";
    }


    @PostMapping(path="/shoppingcarts/{id}/addWatch/{watchId}") // Map ONLY POST Requests
    public @ResponseBody String addWatchToShoppingcart (@PathVariable Integer id, @PathVariable Integer watchId) {

        Optional<Watch> watch = watchRepository.findById(watchId);
        Optional<Shoppingcart> shoppingcart = shoppingcartRepository.findById(id);
        shoppingcart.get().addWatch(watch.get());
        shoppingcartRepository.save(shoppingcart.get());
        return "Saved";
    }

    @PostMapping(path="/shoppingcarts/{id}/removeWatch/{watchId}") // Map ONLY POST Requests
    public @ResponseBody String removeWatchFromShoppingcart (@PathVariable Integer id, @PathVariable Integer watchId) {

        Optional<Watch> watch = watchRepository.findById(watchId);
        Optional<Shoppingcart> shoppingcart = shoppingcartRepository.findById(id);
        shoppingcart.get().removeWatch(watch.get());
        shoppingcartRepository.save(shoppingcart.get());
        return "Removed";
    }

}
