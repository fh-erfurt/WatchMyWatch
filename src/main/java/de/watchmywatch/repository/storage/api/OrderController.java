package de.watchmywatch.repository.storage.api;

import de.watchmywatch.model.OrderManagment.Order;
import de.watchmywatch.repository.exception.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


@Controller // Identifies Class as Controller
@RequestMapping(path="/api") // URL's start with /demo (after Application path)
public class OrderController {
    @Autowired // This means to get the bean called OrderRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    public OrderRepository orderRepository;

    // GET /api/orders returns all orders
    @GetMapping(path="/orders")
    public @ResponseBody Iterable<Order> getAllOrders() {
        // This returns a JSON or XML with the orders
        return orderRepository.findAll();
    }

    // GET /api/orders/:id returns order with id
    @GetMapping(value="/orders/{orderId}")
    public @ResponseBody
    Order getOneOrder(@PathVariable Integer  orderId) {
        // This returns a JSON or XML with the one order
        return orderRepository.findById(orderId)
                .orElseThrow(() -> new NotFoundException("order", orderId));
    }

    // POST /api/orders creates an Order in the database and returns "Saved"
    @PostMapping(path="/orders") // Map ONLY POST Requests
    public @ResponseBody
    String addNewOrder (Order order) {
        // @ResponseBody means the returned String is the response, not a view name
        orderRepository.save(order);
        return "Saved";
    }

    // PUT /api/orders/:id updates the order with the id
    @PutMapping("/orders/{id}")
    public @ResponseBody
    Order updateOrder(@PathVariable Integer id, @RequestBody Order newOrder) {
        return orderRepository.findById(id)
                .map(order -> {
                    order.setOrderDate(newOrder.getOrderDate());
                    order.setShipDate(newOrder.getShipDate());
                    order.setAddress(newOrder.getAddress());
                    order.setOrderStatus(newOrder.getOrderStatus());
                    order.setShippingStatus(newOrder.getShippingStatus());
                    order.setShoppingcart(newOrder.getShoppingcart());
                    // order.calcTotal();  Already done in setShoppingcart
                    order.setPayment(newOrder.getPayment());
                    return orderRepository.save(order);
                })
                .orElseGet(() -> {
                    newOrder.setId(id);
                    return orderRepository.save(newOrder);
                });
    }

    // DELETE /api/orders/:id deletes the order with id and returns "Deleted"
    @DeleteMapping(path = "/orders/{id}")
    public @ResponseBody
    String updateOrder(@PathVariable Integer id) {
        orderRepository.deleteById(id);
        return "Deleted";
    }
}